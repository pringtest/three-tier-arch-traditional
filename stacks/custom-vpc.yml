AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC - Private and Public subnets'

Parameters:
  Project:
    Type: String
  NodeEnv:
    Type: String
  VpcBlock: # The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
    Type: String
    Default: 192.168.0.0/16
  PublicSubnet01Block: # CidrBlock for public subnet 01 within the VPC
    Type: String
    Default: 192.168.0.0/18
  PrivateSubnet01Block: # CidrBlock for private subnet 01 within the VPC
    Type: String
    Default: 192.168.128.0/18

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PrivateSubnet01Block

Mappings:
  ServiceNamePrefixMap:
    aws:
      Name: com.amazonaws
    aws-cn:
      Name: cn.com.amazonaws
    aws-us-gov:
      Name: com.amazonaws

Resources:
  # create VPC, this will also create route table, network ACL, Security Group
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${NodeEnv}-${Project}-vpc'

  # create internet gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub '${NodeEnv}-${Project}-internet-gateway'

  # attach internet gateway to VPC
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  # create route table for public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${NodeEnv}-${Project}-public-subnets'
      - Key: Network
        Value: Public

  # # create route table for private subnet 1:
  # PrivateRouteTable01:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #     - Key: Name
  #       Value: !Sub '${NodeEnv}-${Project}-private-subnets-01'
  #     - Key: Network
  #       Value: Private01
  
  # create public subnet
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NodeEnv}-${Project}-public-subnet-01"
  
  # create private subnet
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 01
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${NodeEnv}-${Project}-private-subnet-01"

  # 1 public subnet connect to 1 route table
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  # # 1 private subnet connect to 1 route table
  # PrivateSubnet01RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet01
  #     RouteTableId: !Ref PrivateRouteTable01
  
  # connect public route table to internet gateway
  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # |------------------------------------------------------|
  # | VPC Endpoints.                                       |
  # |------------------------------------------------------|

  # create security group for web server instance
  SSMSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSM Endpoint Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # create Vpc Endpoint for SSM
  SSMInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt SSMSecurityGroup.GroupId
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      SubnetIds: 
        - !Ref PrivateSubnet01
      VpcId: !Ref VPC
  
  # create Vpc Endpoint for SSM Message
  SSMMessagesInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt SSMSecurityGroup.GroupId
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      SubnetIds: 
        - !Ref PrivateSubnet01
      VpcId: !Ref VPC
  
  # # create Vpc Endpoint for ec2 Messages
  # Ec2MessagesInterfaceEndpoint:
  #   Type: 'AWS::EC2::VPCEndpoint'
  #   Properties:
  #     VpcEndpointType: Interface
  #     PrivateDnsEnabled: true
  #     SecurityGroupIds:
  #       - !GetAtt SSMSecurityGroup.GroupId
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal: '*'
  #           Action: '*'
  #           Resource: '*'
  #     ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
  #     SubnetIds: 
  #       - !Ref PrivateSubnet01
  #     VpcId: !Ref VPC
  
  # # create Vpc Endpoint for dynamoDB
  # DynamoDBGatewayEndpoint:
  #   Type: 'AWS::EC2::VPCEndpoint'
  #   Properties:
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal: '*'
  #           Action: '*'
  #           Resource: '*'
  #     RouteTableIds:
  #       - !Ref PrivateRouteTable01
  #     ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
  #     VpcId: !Ref VPC

  # |------------------------------------------------------|
  # | comment below resource to delete natgateway.         |
  # | Enable only when needed.                             |
  # | for example to update code of ec2 in private subnet. |
  # |------------------------------------------------------|

  # # create elastic IP for natgateway az1
  # NatGatewayEIP1:
  #   DependsOn:
  #   - VPCGatewayAttachment
  #   Type: 'AWS::EC2::EIP'
  #   Properties:
  #     Domain: vpc
  
  # # create netgateway az1
  # NatGateway01:
  #   DependsOn:
  #   - NatGatewayEIP1
  #   - PublicSubnet01
  #   - VPCGatewayAttachment
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
  #     SubnetId: !Ref PublicSubnet01
  #     Tags:
  #     - Key: Name
  #       Value: !Sub '${NodeEnv}-${Project}-natgateway-az1'

  # # create route for natgateway az1
  # PrivateRoute01:
  #   DependsOn:
  #   - VPCGatewayAttachment
  #   - NatGateway01
  #   Type: AWS::EC2::Route 
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable01
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGateway01

Outputs:
  PublicSubnet01Id:
    Value: !Ref PublicSubnet01
  PrivateSubnet01Id:
    Value: !Ref PrivateSubnet01
  VPCId:
    Value: !Ref VPC
